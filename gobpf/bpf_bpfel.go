// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package gobpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	DevQueueXmit               *ebpf.ProgramSpec `ebpf:"__dev_queue_xmit"`
	MkrouteInput               *ebpf.ProgramSpec `ebpf:"__mkroute_input"`
	NetifReceiveSkb            *ebpf.ProgramSpec `ebpf:"__netif_receive_skb"`
	BrDevXmit                  *ebpf.ProgramSpec `ebpf:"br_dev_xmit"`
	BrFlood                    *ebpf.ProgramSpec `ebpf:"br_flood"`
	BrForward                  *ebpf.ProgramSpec `ebpf:"br_forward"`
	BrForwardFinish            *ebpf.ProgramSpec `ebpf:"br_forward_finish"`
	BrHandleFrame              *ebpf.ProgramSpec `ebpf:"br_handle_frame"`
	BrHandleFrameFinish        *ebpf.ProgramSpec `ebpf:"br_handle_frame_finish"`
	BrNetifReceiveSkb          *ebpf.ProgramSpec `ebpf:"br_netif_receive_skb"`
	BrNfDevQueueXmit           *ebpf.ProgramSpec `ebpf:"br_nf_dev_queue_xmit"`
	BrNfForwardFinish          *ebpf.ProgramSpec `ebpf:"br_nf_forward_finish"`
	BrNfForwardIp              *ebpf.ProgramSpec `ebpf:"br_nf_forward_ip"`
	BrNfHookThresh             *ebpf.ProgramSpec `ebpf:"br_nf_hook_thresh"`
	BrNfPostRouting            *ebpf.ProgramSpec `ebpf:"br_nf_post_routing"`
	BrNfPreRouting             *ebpf.ProgramSpec `ebpf:"br_nf_pre_routing"`
	BrNfPreRoutingFinish       *ebpf.ProgramSpec `ebpf:"br_nf_pre_routing_finish"`
	BrNfPreRoutingFinishBridge *ebpf.ProgramSpec `ebpf:"br_nf_pre_routing_finish_bridge"`
	BrPassFrameUp              *ebpf.ProgramSpec `ebpf:"br_pass_frame_up"`
	EnqueueToBacklog           *ebpf.ProgramSpec `ebpf:"enqueue_to_backlog"`
	IpFinishOutput             *ebpf.ProgramSpec `ebpf:"ip_finish_output"`
	IpForward                  *ebpf.ProgramSpec `ebpf:"ip_forward"`
	IpHandleMartianSource      *ebpf.ProgramSpec `ebpf:"ip_handle_martian_source"`
	IpOutput                   *ebpf.ProgramSpec `ebpf:"ip_output"`
	IpRcv                      *ebpf.ProgramSpec `ebpf:"ip_rcv"`
	IpRcvFinish                *ebpf.ProgramSpec `ebpf:"ip_rcv_finish"`
	IpRouteInputNoref          *ebpf.ProgramSpec `ebpf:"ip_route_input_noref"`
	IpRouteInputSlow           *ebpf.ProgramSpec `ebpf:"ip_route_input_slow"`
	Ipv4NeighLookup            *ebpf.ProgramSpec `ebpf:"ipv4_neigh_lookup"`
	NapiGroReceive             *ebpf.ProgramSpec `ebpf:"napi_gro_receive"`
	NetifRx                    *ebpf.ProgramSpec `ebpf:"netif_rx"`
	NfBridgeUpdateProtocol     *ebpf.ProgramSpec `ebpf:"nf_bridge_update_protocol"`
	NfHookSlow                 *ebpf.ProgramSpec `ebpf:"nf_hook_slow"`
	NfNatIpv4LocalFn           *ebpf.ProgramSpec `ebpf:"nf_nat_ipv4_local_fn"`
	NfNatIpv4LocalIn           *ebpf.ProgramSpec `ebpf:"nf_nat_ipv4_local_in"`
	NfNatIpv4Out               *ebpf.ProgramSpec `ebpf:"nf_nat_ipv4_out"`
	NfNatIpv4PreRouting        *ebpf.ProgramSpec `ebpf:"nf_nat_ipv4_pre_routing"`
	NftNatDoChain              *ebpf.ProgramSpec `ebpf:"nft_nat_do_chain"`
	PacketRcv                  *ebpf.ProgramSpec `ebpf:"packet_rcv"`
	ResolveNormalCt            *ebpf.ProgramSpec `ebpf:"resolve_normal_ct"`
	SkbPush                    *ebpf.ProgramSpec `ebpf:"skb_push"`
	TpacketRcv                 *ebpf.ProgramSpec `ebpf:"tpacket_rcv"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	RouteEvent *ebpf.MapSpec `ebpf:"route_event"`
	Stacks     *ebpf.MapSpec `ebpf:"stacks"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	RouteEvent *ebpf.Map `ebpf:"route_event"`
	Stacks     *ebpf.Map `ebpf:"stacks"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.RouteEvent,
		m.Stacks,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	DevQueueXmit               *ebpf.Program `ebpf:"__dev_queue_xmit"`
	MkrouteInput               *ebpf.Program `ebpf:"__mkroute_input"`
	NetifReceiveSkb            *ebpf.Program `ebpf:"__netif_receive_skb"`
	BrDevXmit                  *ebpf.Program `ebpf:"br_dev_xmit"`
	BrFlood                    *ebpf.Program `ebpf:"br_flood"`
	BrForward                  *ebpf.Program `ebpf:"br_forward"`
	BrForwardFinish            *ebpf.Program `ebpf:"br_forward_finish"`
	BrHandleFrame              *ebpf.Program `ebpf:"br_handle_frame"`
	BrHandleFrameFinish        *ebpf.Program `ebpf:"br_handle_frame_finish"`
	BrNetifReceiveSkb          *ebpf.Program `ebpf:"br_netif_receive_skb"`
	BrNfDevQueueXmit           *ebpf.Program `ebpf:"br_nf_dev_queue_xmit"`
	BrNfForwardFinish          *ebpf.Program `ebpf:"br_nf_forward_finish"`
	BrNfForwardIp              *ebpf.Program `ebpf:"br_nf_forward_ip"`
	BrNfHookThresh             *ebpf.Program `ebpf:"br_nf_hook_thresh"`
	BrNfPostRouting            *ebpf.Program `ebpf:"br_nf_post_routing"`
	BrNfPreRouting             *ebpf.Program `ebpf:"br_nf_pre_routing"`
	BrNfPreRoutingFinish       *ebpf.Program `ebpf:"br_nf_pre_routing_finish"`
	BrNfPreRoutingFinishBridge *ebpf.Program `ebpf:"br_nf_pre_routing_finish_bridge"`
	BrPassFrameUp              *ebpf.Program `ebpf:"br_pass_frame_up"`
	EnqueueToBacklog           *ebpf.Program `ebpf:"enqueue_to_backlog"`
	IpFinishOutput             *ebpf.Program `ebpf:"ip_finish_output"`
	IpForward                  *ebpf.Program `ebpf:"ip_forward"`
	IpHandleMartianSource      *ebpf.Program `ebpf:"ip_handle_martian_source"`
	IpOutput                   *ebpf.Program `ebpf:"ip_output"`
	IpRcv                      *ebpf.Program `ebpf:"ip_rcv"`
	IpRcvFinish                *ebpf.Program `ebpf:"ip_rcv_finish"`
	IpRouteInputNoref          *ebpf.Program `ebpf:"ip_route_input_noref"`
	IpRouteInputSlow           *ebpf.Program `ebpf:"ip_route_input_slow"`
	Ipv4NeighLookup            *ebpf.Program `ebpf:"ipv4_neigh_lookup"`
	NapiGroReceive             *ebpf.Program `ebpf:"napi_gro_receive"`
	NetifRx                    *ebpf.Program `ebpf:"netif_rx"`
	NfBridgeUpdateProtocol     *ebpf.Program `ebpf:"nf_bridge_update_protocol"`
	NfHookSlow                 *ebpf.Program `ebpf:"nf_hook_slow"`
	NfNatIpv4LocalFn           *ebpf.Program `ebpf:"nf_nat_ipv4_local_fn"`
	NfNatIpv4LocalIn           *ebpf.Program `ebpf:"nf_nat_ipv4_local_in"`
	NfNatIpv4Out               *ebpf.Program `ebpf:"nf_nat_ipv4_out"`
	NfNatIpv4PreRouting        *ebpf.Program `ebpf:"nf_nat_ipv4_pre_routing"`
	NftNatDoChain              *ebpf.Program `ebpf:"nft_nat_do_chain"`
	PacketRcv                  *ebpf.Program `ebpf:"packet_rcv"`
	ResolveNormalCt            *ebpf.Program `ebpf:"resolve_normal_ct"`
	SkbPush                    *ebpf.Program `ebpf:"skb_push"`
	TpacketRcv                 *ebpf.Program `ebpf:"tpacket_rcv"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.DevQueueXmit,
		p.MkrouteInput,
		p.NetifReceiveSkb,
		p.BrDevXmit,
		p.BrFlood,
		p.BrForward,
		p.BrForwardFinish,
		p.BrHandleFrame,
		p.BrHandleFrameFinish,
		p.BrNetifReceiveSkb,
		p.BrNfDevQueueXmit,
		p.BrNfForwardFinish,
		p.BrNfForwardIp,
		p.BrNfHookThresh,
		p.BrNfPostRouting,
		p.BrNfPreRouting,
		p.BrNfPreRoutingFinish,
		p.BrNfPreRoutingFinishBridge,
		p.BrPassFrameUp,
		p.EnqueueToBacklog,
		p.IpFinishOutput,
		p.IpForward,
		p.IpHandleMartianSource,
		p.IpOutput,
		p.IpRcv,
		p.IpRcvFinish,
		p.IpRouteInputNoref,
		p.IpRouteInputSlow,
		p.Ipv4NeighLookup,
		p.NapiGroReceive,
		p.NetifRx,
		p.NfBridgeUpdateProtocol,
		p.NfHookSlow,
		p.NfNatIpv4LocalFn,
		p.NfNatIpv4LocalIn,
		p.NfNatIpv4Out,
		p.NfNatIpv4PreRouting,
		p.NftNatDoChain,
		p.PacketRcv,
		p.ResolveNormalCt,
		p.SkbPush,
		p.TpacketRcv,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
